#!/usr/bin/env groovy
// inputs repos
// def checkBranchPattern(String pattern){} => true/false
// def compareBranches(repo, sourceBranch, targetBranch,){} => diferences
// def evaluateDifferences(String difference){} => true/false
// run only if checkBranchPattern true => def doJGitOperation(){"some commands"}
def gitFunction(String repo){
 checkout([$class: 'GitSCM',
 branches: [[name: '*/master']],
 doGenerateSubmoduleConfigurations: false,
 extensions: [[$class: 'CleanBeforeCheckout']],
 submoduleCfg: [],
 userRemoteConfigs:  [[credentialsId: 'gitCreds', url: repo]]])
 def output = sh returnStdout: true, script: "git diff remotes/origin/${params.source} remotes/origin/${params.target}"  
 return output
}

def inputValues(){
    def names = []
    def start = 0
    def end = 0
    def var = "https://github.com/DialgicMew/example.git;https://github.com/DialgicMew/jenkins.git;"
    for (element in var) {
        if(element == ';'){
            def additionValue = var.substring(start, end)
            names.add(additionValue)
            start = end + 1
        }
        end = end + 1
    }
    return names
}

def result;

node{


properties([
  parameters(
    [booleanParam(name: 'checkPattern', defaultValue: false, description: 'Check Branch Pattern?'),
    text(name: 'gitRepos', defaultValue: 'https://github.com/DialgicMew/example.git', description: 'Enter the git repos seperated by a semicolon'),
    string(name: 'source', defaultValue: 'master', description: 'Compare which branch?'),
    string(name: 'target', defaultValue: 'dev', description: 'Compare with which branch?')]
)
])

stage('Build') 
{
    echo "${params.source}"
    result = inputValues()
    for (element in result) {
        echo element
    }
    
}
stage('Test') 
{
echo "Testing"
}
stage('Deploy') 
{
echo "Deploying"
}
}