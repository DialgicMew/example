#!/usr/bin/env groovy
// inputs repos
// def checkBranchPattern(String pattern){} => true/false
// def compareBranches(repo, sourceBranch, targetBranch,){} => diferences
// def evaluateDifferences(String difference){} => true/false
// run only if checkBranchPattern true => def doJGitOperation(){"some commands"}
def gitFunction(String repo){
 checkout([$class: 'GitSCM',
 branches: [[name: '*/master']],
 doGenerateSubmoduleConfigurations: false,
 extensions: [[$class: 'CleanBeforeCheckout']],
 submoduleCfg: [],
 userRemoteConfigs:  [[credentialsId: 'gitCreds', url: repo]]])
 def output = sh returnStdout: true, script: "git diff --name-only remotes/origin/${params.source} remotes/origin/${params.target}"  
 return output
}

def evaluate(String ans){
    if(ans.trim() == "pom.xml")
    {
        def numAns = sh returnStdout: true, script: "git diff --numstat remotes/origin/${params.source} remotes/origin/${params.target}"
        def numOfLines = numAns.substring(0, 2).trim()
        if(numOfLines == '1'){
            def output = sh returnStdout: true, script: "git diff --unified=0 remotes/origin/${params.source} remotes/origin/${params.target}" 
            def tag;
            for(int start = 0; start < output.length(); start = start + 1){
                if(output[start] == '<'){
                    tag = output.substring(start+1, start + 8)
                    break
                }
            }
            if(tag == 'version'){
                return false
                // false means there are no difference in code in the branches selected
            }
            return true
            // true means that there are some differences in the code in  the branches selected
        }
        return true
    }
    else if(ans.trim() == ""){
        return false
    }
    return true
}

def inputValues(){
    def names = []
    def start = 0
    def end = 0
    def var = params.gitRepos
    for (element in var) {
        if(element == ';'){
            def additionValue = var.substring(start, end)
            names.add(additionValue)
            start = end + 1
        }
        end = end + 1
    }
    return names
}

def result;

node{

properties([
  parameters(
    [booleanParam(name: 'checkPattern', defaultValue: false, description: 'Check Branch Pattern?'),
    text(name: 'gitRepos', defaultValue: 'https://github.com/DialgicMew/jenkins.git;', description: 'Enter the git repos seperated by a semicolon'),
    string(name: 'source', defaultValue: 'master', description: 'Source Branch of comparison'),
    string(name: 'target', defaultValue: 'dev', description: 'Target branch of comparison')])
])

stage('Build') 
{
    echo "${params.source}"
    result = inputValues()
    for (element in result) {
        def answer = gitFunction(element)
        def ansBool = evaluate(answer)
        if(ansBool == false){
            echo "Code Repository ${element} not eligible for release, since no code difference found between ${params.source} and ${params.target}"
        }
        else{
            echo "Some Changes have been detected between branches ${params.source} and ${params.target} in ${element}"
        }
    } 
}
stage('Test') 
{
echo "Testing"
}
stage('Deploy') 
{
echo "Deploying"
}
}